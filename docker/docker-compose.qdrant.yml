services:
  # Inference Core Application with Qdrant Vector Store
  inference-core:
    environment:
      VECTOR_BACKEND: ${VECTOR_BACKEND:-qdrant}
      VECTOR_COLLECTION_DEFAULT: ${VECTOR_COLLECTION_DEFAULT:-default_documents}
      QDRANT_URL: ${QDRANT_URL:-http://qdrant:6333}
      QDRANT_API_KEY: ${QDRANT_API_KEY:-}

    depends_on:
      qdrant:
        condition: service_healthy

  # Celery Worker (will also use vector store for ingestion tasks)
  celery-worker:
    environment:
      VECTOR_BACKEND: ${VECTOR_BACKEND:-qdrant}
      VECTOR_COLLECTION_DEFAULT: ${VECTOR_COLLECTION_DEFAULT:-default_documents}
      QDRANT_URL: ${QDRANT_URL:-http://qdrant:6333}
      QDRANT_API_KEY: ${QDRANT_API_KEY:-}
    depends_on:
      qdrant:
        condition: service_healthy

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ${APP_NAME:-backend-template}-qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    ports:
      - '${QDRANT_PORT:-6333}:6333'
      - '${QDRANT_GRPC_PORT:-6334}:6334'
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - inference-core-network
    healthcheck:
      test:
        ['CMD', 'wget', '-qO-', '${QDRANT_URL:-http://qdrant:6333}/collections']
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  qdrant_data:
    driver: local
